{"version":3,"sources":["components/Todoitems/Todolist.js","components/Additems/Additems.js","App.js","serviceWorker.js","index.js"],"names":["Todoitems","props","items","deleteItem","itemList","length","map","item","key","id","className","name","age","onClick","Additems","state","alart","handleChange","e","target","setState","value","handleSubmit","preventDefault","class","addItems","onSubmit","this","type","placeholder","onChange","Component","App","filter","push","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yMA+BeA,EA9BG,SAACC,GAAW,IACpBC,EAAsBD,EAAtBC,MAAOC,EAAeF,EAAfE,WAETC,EADOF,EAAMG,OAEjBH,EAAMI,KAAI,SAACC,GACT,OACE,yBAAKC,IAAKD,EAAKE,IACb,0BAAMC,UAAU,aAAaH,EAAKI,MAClC,0BAAMD,UAAU,YAAYH,EAAKK,KACjC,0BAAMF,UAAU,cAAcG,QAAS,kBAAMV,EAAWI,EAAKE,MAA7D,YAON,yBAAKC,UAAU,iBAAf,4BAGF,OACE,yBAAKA,UAAU,aACb,6BACE,0BAAMA,UAAU,kBAAhB,QACA,0BAAMA,UAAU,iBAAhB,OACA,0BAAMA,UAAU,oBAAhB,WAEDN,I,OCiCQU,E,4MA1DbC,MAAQ,CACNJ,KAAM,GACNC,IAAK,GACLI,MAAO,I,EAETC,aAAe,SAACC,GACd,IAAIT,EAAKS,EAAEC,OAAOV,GAClB,EAAKW,SAAL,eACGX,EAAKS,EAAEC,OAAOE,S,EAInBC,aAAe,SAACJ,GACdA,EAAEK,iBADkB,MAEE,EAAKR,MAAnBJ,EAFY,EAEZA,KAAMC,EAFM,EAENA,IAED,KAATD,GAAuB,KAARC,EACjB,EAAKQ,SAAS,CACZJ,MAAO,uCACPQ,MAAO,WAGT,EAAKvB,MAAMwB,SAAS,EAAKV,OACzB,EAAKK,SAAS,CACZT,KAAM,GACNC,IAAK,GACLI,MAAO,GACPQ,MAAO,O,uDAKX,OACE,0BAAME,SAAUC,KAAKL,cACnB,2BACEZ,UAAU,YACVkB,KAAK,OACLC,YAAY,gBACZpB,GAAG,OACHqB,SAAUH,KAAKV,aACfI,MAAOM,KAAKZ,MAAMJ,OAEpB,2BACED,UAAU,WACVkB,KAAK,SACLC,YAAY,eACZpB,GAAG,MACHqB,SAAUH,KAAKV,aACfI,MAAOM,KAAKZ,MAAMH,MAEpB,2BAAOgB,KAAK,SAASP,MAAM,QAC3B,6BACE,0BAAMX,UAAWiB,KAAKZ,MAAMS,OAAQG,KAAKZ,MAAMC,a,GArDlCe,aCiCRC,E,4MA9BbjB,MAAQ,CACNb,MAAO,I,EAETC,WAAa,SAACM,GACZ,IAAIP,EAAQ,EAAKa,MAAMb,MACvBA,EAAQA,EAAM+B,QAAO,SAAC1B,GACpB,OAAOA,EAAKE,KAAOA,KAGrB,EAAKW,SAAS,CAAElB,W,EAElBuB,SAAW,SAAClB,GACVA,EAAKE,GAAK,EAAKM,MAAMb,MAAMG,OAAS,EACpC,IAAIH,EAAQ,EAAKa,MAAMb,MACvBA,EAAMgC,KAAK3B,GACX,EAAKa,SAAS,CAAElB,W,uDAGhB,OACE,yBAAKQ,UAAU,kBACb,yDACA,yBAAKA,UAAU,IACb,kBAAC,EAAD,CAAWR,MAAOyB,KAAKZ,MAAMb,MAAOC,WAAYwB,KAAKxB,aACrD,kBAAC,EAAD,CAAUsB,SAAUE,KAAKF,iB,GAxBjBM,aCSEI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.c52db4d5.chunk.js","sourcesContent":["import React from \"react\";\r\nconst Todoitems = (props) => {\r\n  const { items, deleteItem } = props;\r\n  let length = items.length;\r\n  const itemList = length ? (\r\n    items.map((item) => {\r\n      return (\r\n        <div key={item.id}>\r\n          <span className=\"info name\">{item.name}</span>\r\n          <span className=\"info age\">{item.age}</span>\r\n          <span className=\"info remove\" onClick={() => deleteItem(item.id)}>\r\n            &times;\r\n          </span>\r\n        </div>\r\n      );\r\n    })\r\n  ) : (\r\n    <div className=\"info no-items\">There Is No Item To Show</div>\r\n  );\r\n\r\n  return (\r\n    <div className=\"listItems\">\r\n      <div>\r\n        <span className=\"info name head\">Name</span>\r\n        <span className=\"info age head\">Age</span>\r\n        <span className=\"info remove head\">Remove</span>\r\n      </div>\r\n      {itemList}\r\n    </div>\r\n  );\r\n};\r\nexport default Todoitems;\r\n","import React, { Component } from \"react\";\r\nclass Additems extends Component {\r\n  state = {\r\n    name: \"\",\r\n    age: \"\",\r\n    alart: \"\",\r\n  };\r\n  handleChange = (e) => {\r\n    let id = e.target.id;\r\n    this.setState({\r\n      [id]: e.target.value,\r\n    });\r\n  };\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const { name, age } = this.state;\r\n\r\n    if (name === \"\" || age === \"\") {\r\n      this.setState({\r\n        alart: \"Please Enter Your Name And Your Age \",\r\n        class: \"alart\",\r\n      });\r\n    } else {\r\n      this.props.addItems(this.state);\r\n      this.setState({\r\n        name: \"\",\r\n        age: \"\",\r\n        alart: \"\",\r\n        class: \"\",\r\n      });\r\n    }\r\n  };\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleSubmit}>\r\n        <input\r\n          className=\"name info\"\r\n          type=\"text\"\r\n          placeholder=\"Add Your Name\"\r\n          id=\"name\"\r\n          onChange={this.handleChange}\r\n          value={this.state.name}\r\n        />\r\n        <input\r\n          className=\"age info\"\r\n          type=\"number\"\r\n          placeholder=\"Add Your Age\"\r\n          id=\"age\"\r\n          onChange={this.handleChange}\r\n          value={this.state.age}\r\n        />\r\n        <input type=\"submit\" value=\"Add\" />\r\n        <div>\r\n          <span className={this.state.class}>{this.state.alart}</span>\r\n        </div>\r\n      </form>\r\n    );\r\n  }\r\n}\r\nexport default Additems;\r\n","import React, { Component } from \"react\";\nimport Todoitems from \"./components/Todoitems/Todolist\";\nimport Additems from \"./components/Additems/Additems\";\nclass App extends Component {\n  state = {\n    items: [],\n  };\n  deleteItem = (id) => {\n    let items = this.state.items;\n    items = items.filter((item) => {\n      return item.id !== id;\n    });\n\n    this.setState({ items });\n  };\n  addItems = (item) => {\n    item.id = this.state.items.length + 1;\n    let items = this.state.items;\n    items.push(item);\n    this.setState({ items });\n  };\n  render() {\n    return (\n      <div className=\"App container \">\n        <h1>Add Your Name To The List</h1>\n        <div className=\"\">\n          <Todoitems items={this.state.items} deleteItem={this.deleteItem} />\n          <Additems addItems={this.addItems} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}